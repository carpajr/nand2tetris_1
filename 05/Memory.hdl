// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // PATTERNS
    // abcd efgh ijkl mnop 
    // ab (2 MSB)
    // 00, 01 : RAM
    // 10     : SCREEN
    // 11     : KEYBOARD

    // ---------------------- RAM ----------------------
    //  Interval: 0 - 16383 (16K) 
    //  Address: *000 0000 0000 0000 : *011 1111 1111 1111 
    //  Selection pattern: 00,01
    // -------------------------------------------------
    RAM16K(in=in, load=lram, address=address[0..13], out=ram);
    Or(a=lram0, b=lram1, out=lram);

    // --------------------- SCREEN ---------------------
    //  Interval: 16384 - 24575 (8K)
    //  Address: *100 0000 0000 0000 : *101 1111 1111 1111 
    //  Selection pattern: 100, 101
    // -------------------------------------------------
    //RAM4K(in=in, load=lscr0, address=address[0..11], out=scr0); // First 8K segment
    //RAM4K(in=in, load=lscr1, address=address[0..11], out=scr1); // Last  8K segment
    
    // If lscr == 1 and address[12] = 0 : lscr0 = 1
    // If lscr == 1 and address[12] = 1 : lscr1 = 0
    //And(a=lscr, b=address[12], out=selseg);
    //DMux(in=lscr, sel=selseg, a=lscr0, b=lscr1);
    //Mux16(a=scr0, b=scr1, sel=selseg, out=scr);

    Screen(in=in, load=lscr, address=address[0..12], out=scr);

   
    // ------------------- KEYBOARD --------------------
    // Interval: 24576 (16 bits)
    // Address: *110 0000 0000 0000 
    // Selection pattern: 11
    // -------------------------------------------------
    //Register(in=in, load=lkbd, out=kbd);
    Keyboard(out=kbd);

    // Write 
    DMux4Way(
        in=load, sel=address[13..14],
        a=lram0, b=lram1, c=lscr, d=lkbd
    );

    // Read
    Mux4Way16(
        a=ram, b=ram, c=scr, d=kbd,
        sel=address[13..14], out=out
    );
}
