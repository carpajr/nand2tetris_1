// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6]; 
    OUT out[16];

    // ADDRESS
    // MSB LSB SEGMENT
    // 000 xxx RAM8[0]
    // 001 xxx RAM8[1]
    // 010 xxx RAM8[2]
    // 011 xxx RAM8[3]
    // 100 xxx RAM8[4]
    // 101 xxx RAM8[5]
    // 110 xxx RAM8[6]
    // 111 xxx RAM8[7]

    PARTS:
    // Put your code here:
    RAM8(in=in, load=l0, address=address[0..2], out=m0);
    RAM8(in=in, load=l1, address=address[0..2], out=m1);
    RAM8(in=in, load=l2, address=address[0..2], out=m2);
    RAM8(in=in, load=l3, address=address[0..2], out=m3);
    RAM8(in=in, load=l4, address=address[0..2], out=m4);
    RAM8(in=in, load=l5, address=address[0..2], out=m5);
    RAM8(in=in, load=l6, address=address[0..2], out=m6);
    RAM8(in=in, load=l7, address=address[0..2], out=m7);

    //Write
    DMux8Way(
               in=load, sel=address[3..5], 
               a=l0, b=l1, c=l2, d=l3,
               e=l4, f=l5, g=l6, h=l7 
             );

    //Read
    Mux8Way16(
                a=m0, b=m1, c=m2, d=m3,
                e=m4, f=m5, g=m6, h=m7,
                sel=address[3..5], out=out
            );

}
